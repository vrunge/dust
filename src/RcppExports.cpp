// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// colPow
arma::colvec colPow(arma::colvec& inputCol, int power);
RcppExport SEXP _dust_colPow(SEXP inputColSEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec& >::type inputCol(inputColSEXP);
    Rcpp::traits::input_parameter< int >::type power(powerSEXP);
    rcpp_result_gen = Rcpp::wrap(colPow(inputCol, power));
    return rcpp_result_gen;
END_RCPP
}
// test
double test(int t, int i, int j, const NumericVector& valuesCumsum, const NumericVector& costRecord);
RcppExport SEXP _dust_test(SEXP tSEXP, SEXP iSEXP, SEXP jSEXP, SEXP valuesCumsumSEXP, SEXP costRecordSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type valuesCumsum(valuesCumsumSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type costRecord(costRecordSEXP);
    rcpp_result_gen = Rcpp::wrap(test(t, i, j, valuesCumsum, costRecord));
    return rcpp_result_gen;
END_RCPP
}
// test1D
double test1D(int t, int i, int j, const NumericVector& valuesCumsum, const NumericVector& costRecord, double optimalCost);
RcppExport SEXP _dust_test1D(SEXP tSEXP, SEXP iSEXP, SEXP jSEXP, SEXP valuesCumsumSEXP, SEXP costRecordSEXP, SEXP optimalCostSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type valuesCumsum(valuesCumsumSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type costRecord(costRecordSEXP);
    Rcpp::traits::input_parameter< double >::type optimalCost(optimalCostSEXP);
    rcpp_result_gen = Rcpp::wrap(test1D(t, i, j, valuesCumsum, costRecord, optimalCost));
    return rcpp_result_gen;
END_RCPP
}
// test1DRand
double test1DRand(int t, int i, int j, const NumericVector& valuesCumsum, const NumericVector& costRecord, double optimalCost);
RcppExport SEXP _dust_test1DRand(SEXP tSEXP, SEXP iSEXP, SEXP jSEXP, SEXP valuesCumsumSEXP, SEXP costRecordSEXP, SEXP optimalCostSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type valuesCumsum(valuesCumsumSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type costRecord(costRecordSEXP);
    Rcpp::traits::input_parameter< double >::type optimalCost(optimalCostSEXP);
    rcpp_result_gen = Rcpp::wrap(test1DRand(t, i, j, valuesCumsum, costRecord, optimalCost));
    return rcpp_result_gen;
END_RCPP
}
// testMV1C
double testMV1C(int t, int i, int j, const arma::dmat& valuesCumsum, const NumericVector& costRecord, double optimalCost);
RcppExport SEXP _dust_testMV1C(SEXP tSEXP, SEXP iSEXP, SEXP jSEXP, SEXP valuesCumsumSEXP, SEXP costRecordSEXP, SEXP optimalCostSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< const arma::dmat& >::type valuesCumsum(valuesCumsumSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type costRecord(costRecordSEXP);
    Rcpp::traits::input_parameter< double >::type optimalCost(optimalCostSEXP);
    rcpp_result_gen = Rcpp::wrap(testMV1C(t, i, j, valuesCumsum, costRecord, optimalCost));
    return rcpp_result_gen;
END_RCPP
}
// modelCost
double modelCost(int t, int i, NumericVector& valuesCumsum);
RcppExport SEXP _dust_modelCost(SEXP tSEXP, SEXP iSEXP, SEXP valuesCumsumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type valuesCumsum(valuesCumsumSEXP);
    rcpp_result_gen = Rcpp::wrap(modelCost(t, i, valuesCumsum));
    return rcpp_result_gen;
END_RCPP
}
// modelCostMV
double modelCostMV(int t, int i, arma::dmat& valuesCumsum);
RcppExport SEXP _dust_modelCostMV(SEXP tSEXP, SEXP iSEXP, SEXP valuesCumsumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< arma::dmat& >::type valuesCumsum(valuesCumsumSEXP);
    rcpp_result_gen = Rcpp::wrap(modelCostMV(t, i, valuesCumsum));
    return rcpp_result_gen;
END_RCPP
}
// madEstimator
double madEstimator(NumericVector& data);
RcppExport SEXP _dust_madEstimator(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(madEstimator(data));
    return rcpp_result_gen;
END_RCPP
}
// dust1D
List dust1D(NumericVector data, double penalty);
RcppExport SEXP _dust_dust1D(SEXP dataSEXP, SEXP penaltySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type penalty(penaltySEXP);
    rcpp_result_gen = Rcpp::wrap(dust1D(data, penalty));
    return rcpp_result_gen;
END_RCPP
}
// dust1DRand
List dust1DRand(NumericVector data, double penalty, double alpha);
RcppExport SEXP _dust_dust1DRand(SEXP dataSEXP, SEXP penaltySEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(dust1DRand(data, penalty, alpha));
    return rcpp_result_gen;
END_RCPP
}
// dust1DRandConstraint
List dust1DRandConstraint(NumericVector data, double penalty, double alpha);
RcppExport SEXP _dust_dust1DRandConstraint(SEXP dataSEXP, SEXP penaltySEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(dust1DRandConstraint(data, penalty, alpha));
    return rcpp_result_gen;
END_RCPP
}
// dustMV1C
List dustMV1C(arma::dmat& data, double penalty);
RcppExport SEXP _dust_dustMV1C(SEXP dataSEXP, SEXP penaltySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::dmat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type penalty(penaltySEXP);
    rcpp_result_gen = Rcpp::wrap(dustMV1C(data, penalty));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_RandomListModule();
RcppExport SEXP _rcpp_module_boot_MCHandlerModule();

static const R_CallMethodDef CallEntries[] = {
    {"_dust_colPow", (DL_FUNC) &_dust_colPow, 2},
    {"_dust_test", (DL_FUNC) &_dust_test, 5},
    {"_dust_test1D", (DL_FUNC) &_dust_test1D, 6},
    {"_dust_test1DRand", (DL_FUNC) &_dust_test1DRand, 6},
    {"_dust_testMV1C", (DL_FUNC) &_dust_testMV1C, 6},
    {"_dust_modelCost", (DL_FUNC) &_dust_modelCost, 3},
    {"_dust_modelCostMV", (DL_FUNC) &_dust_modelCostMV, 3},
    {"_dust_madEstimator", (DL_FUNC) &_dust_madEstimator, 1},
    {"_dust_dust1D", (DL_FUNC) &_dust_dust1D, 2},
    {"_dust_dust1DRand", (DL_FUNC) &_dust_dust1DRand, 3},
    {"_dust_dust1DRandConstraint", (DL_FUNC) &_dust_dust1DRandConstraint, 3},
    {"_dust_dustMV1C", (DL_FUNC) &_dust_dustMV1C, 2},
    {"_rcpp_module_boot_RandomListModule", (DL_FUNC) &_rcpp_module_boot_RandomListModule, 0},
    {"_rcpp_module_boot_MCHandlerModule", (DL_FUNC) &_rcpp_module_boot_MCHandlerModule, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_dust(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
